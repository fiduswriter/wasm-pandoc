name: Build, deploy, and release

on:
  push:
  pull_request:
  release:
    types: [published]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      version: ${{ steps.extract-version.outputs.version }}
      pandoc_version: ${{ steps.extract-version.outputs.pandoc_version }}
    steps:
      - name: Setup build tools
        run: |
          temp_dir=$(mktemp -d)
          pushd "$temp_dir"
          cabal update
          cabal install alex happy
          popd

      - name: Setup GHC-WASM
        run: |
          temp_dir=$(mktemp -d)
          pushd "$temp_dir"
          curl -f -L --retry 5 https://gitlab.haskell.org/haskell-wasm/ghc-wasm-meta/-/archive/master/ghc-wasm-meta-master.tar.gz | tar xz --strip-components=1
          FLAVOUR=9.12 ./setup.sh
          ~/.ghc-wasm/add_to_github_path.sh
          popd

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get Pandoc version
        id: extract-version
        run: |
          VERSION=$(jq -r .version package.json)
          PANDOC_VERSION=$(cat pandoc-version.txt)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "pandoc_version=$PANDOC_VERSION" >> $GITHUB_OUTPUT
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "PANDOC_VERSION=$PANDOC_VERSION" >> $GITHUB_ENV

      - name: Checkout Pandoc
        uses: actions/checkout@v4
        with:
          repository: jgm/pandoc
          ref: ${{ env.PANDOC_VERSION }}
          path: pandoc

      - name: Patch Pandoc
        run: patch -p1 < patch/pandoc.patch

      - name: Build Pandoc WASM
        run: |
          cd pandoc
          wasm32-wasi-cabal build pandoc-cli

      - name: Optimize WASM
        run: |
          mkdir -p dist
          wasm-opt --low-memory-unused -Oz pandoc/dist-newstyle/**/pandoc.wasm -o dist/pandoc.wasm
          cp src/*.js dist

      - name: Test build
        run: wasmtime run --dir .::/ -- dist/pandoc.wasm pandoc/README.md -o pandoc/README.rst

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: wasm-pandoc-${{ env.VERSION }}
          path: dist

  deploy-pages:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      pages: write
      id-token: write
      contents: read
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: wasm-pandoc-${{ needs.build.outputs.version }}

      - name: Prepare demo
        run: cp pandoc.wasm demo/

      - name: Deploy to Pages
        uses: actions/deploy-pages@v4
        with:
          artifact_name: pages-artifact
          target_dir: demo

  release:
    needs: build
    if: ${{ github.event_name == 'release' }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: wasm-pandoc-${{ needs.build.outputs.version }}

      - name: Add metadata files
        run: cp {package.json,README.md,LICENSE} dist/

      - name: Create release package
        run: zip -r wasm-pandoc-${{ needs.build.outputs.version }}.zip dist

      - name: Upload release asset
        uses: softprops/action-gh-release@v1
        with:
          files: wasm-pandoc-${{ needs.build.outputs.version }}.zip
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish to NPM
        uses: JS-DevTools/npm-publish@v3
        with:
          package: dist
          token: ${{ secrets.NPM_TOKEN }}
